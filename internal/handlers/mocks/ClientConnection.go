// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	userdata "github.com/impr0ver/gophKeeper/internal/userdata"
	mock "github.com/stretchr/testify/mock"
)

// ClientConnection is an autogenerated mock type for the ClientConnection type
type ClientConnection struct {
	mock.Mock
}

// CreateRecord provides a mock function with given fields: token, record
func (_m *ClientConnection) CreateRecord(token userdata.AuthToken, record userdata.Record) error {
	ret := _m.Called(token, record)

	if len(ret) == 0 {
		panic("no return value specified for CreateRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(userdata.AuthToken, userdata.Record) error); ok {
		r0 = rf(token, record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRecord provides a mock function with given fields: token, recordID
func (_m *ClientConnection) DeleteRecord(token userdata.AuthToken, recordID string) error {
	ret := _m.Called(token, recordID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(userdata.AuthToken, string) error); ok {
		r0 = rf(token, recordID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRecord provides a mock function with given fields: token, recordID
func (_m *ClientConnection) GetRecord(token userdata.AuthToken, recordID string) (userdata.Record, error) {
	ret := _m.Called(token, recordID)

	if len(ret) == 0 {
		panic("no return value specified for GetRecord")
	}

	var r0 userdata.Record
	var r1 error
	if rf, ok := ret.Get(0).(func(userdata.AuthToken, string) (userdata.Record, error)); ok {
		return rf(token, recordID)
	}
	if rf, ok := ret.Get(0).(func(userdata.AuthToken, string) userdata.Record); ok {
		r0 = rf(token, recordID)
	} else {
		r0 = ret.Get(0).(userdata.Record)
	}

	if rf, ok := ret.Get(1).(func(userdata.AuthToken, string) error); ok {
		r1 = rf(token, recordID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecordsInfo provides a mock function with given fields: token
func (_m *ClientConnection) GetRecordsInfo(token userdata.AuthToken) ([]userdata.Record, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for GetRecordsInfo")
	}

	var r0 []userdata.Record
	var r1 error
	if rf, ok := ret.Get(0).(func(userdata.AuthToken) ([]userdata.Record, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(userdata.AuthToken) []userdata.Record); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]userdata.Record)
		}
	}

	if rf, ok := ret.Get(1).(func(userdata.AuthToken) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: credentials
func (_m *ClientConnection) Login(credentials userdata.UserCredentials) (string, error) {
	ret := _m.Called(credentials)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(userdata.UserCredentials) (string, error)); ok {
		return rf(credentials)
	}
	if rf, ok := ret.Get(0).(func(userdata.UserCredentials) string); ok {
		r0 = rf(credentials)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(userdata.UserCredentials) error); ok {
		r1 = rf(credentials)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: credentials
func (_m *ClientConnection) Register(credentials userdata.UserCredentials) (string, error) {
	ret := _m.Called(credentials)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(userdata.UserCredentials) (string, error)); ok {
		return rf(credentials)
	}
	if rf, ok := ret.Get(0).(func(userdata.UserCredentials) string); ok {
		r0 = rf(credentials)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(userdata.UserCredentials) error); ok {
		r1 = rf(credentials)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClientConnection creates a new instance of ClientConnection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientConnection(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientConnection {
	mock := &ClientConnection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
